// Code generated by counterfeiter. DO NOT EDIT.
package servicesfake

import (
	"io"
	"sync"

	"github.com/xcomponent/xc-cli/services"
)

type FakeIoService struct {
	CopyStub        func(dst io.Writer, src io.Reader) (written int64, err error)
	copyMutex       sync.RWMutex
	copyArgsForCall []struct {
		dst io.Writer
		src io.Reader
	}
	copyReturns struct {
		result1 int64
		result2 error
	}
	copyReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	TempDirStub        func(dir, prefix string) (name string, err error)
	tempDirMutex       sync.RWMutex
	tempDirArgsForCall []struct {
		dir    string
		prefix string
	}
	tempDirReturns struct {
		result1 string
		result2 error
	}
	tempDirReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIoService) Copy(dst io.Writer, src io.Reader) (written int64, err error) {
	fake.copyMutex.Lock()
	ret, specificReturn := fake.copyReturnsOnCall[len(fake.copyArgsForCall)]
	fake.copyArgsForCall = append(fake.copyArgsForCall, struct {
		dst io.Writer
		src io.Reader
	}{dst, src})
	fake.recordInvocation("Copy", []interface{}{dst, src})
	fake.copyMutex.Unlock()
	if fake.CopyStub != nil {
		return fake.CopyStub(dst, src)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.copyReturns.result1, fake.copyReturns.result2
}

func (fake *FakeIoService) CopyCallCount() int {
	fake.copyMutex.RLock()
	defer fake.copyMutex.RUnlock()
	return len(fake.copyArgsForCall)
}

func (fake *FakeIoService) CopyArgsForCall(i int) (io.Writer, io.Reader) {
	fake.copyMutex.RLock()
	defer fake.copyMutex.RUnlock()
	return fake.copyArgsForCall[i].dst, fake.copyArgsForCall[i].src
}

func (fake *FakeIoService) CopyReturns(result1 int64, result2 error) {
	fake.CopyStub = nil
	fake.copyReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeIoService) CopyReturnsOnCall(i int, result1 int64, result2 error) {
	fake.CopyStub = nil
	if fake.copyReturnsOnCall == nil {
		fake.copyReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.copyReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeIoService) TempDir(dir string, prefix string) (name string, err error) {
	fake.tempDirMutex.Lock()
	ret, specificReturn := fake.tempDirReturnsOnCall[len(fake.tempDirArgsForCall)]
	fake.tempDirArgsForCall = append(fake.tempDirArgsForCall, struct {
		dir    string
		prefix string
	}{dir, prefix})
	fake.recordInvocation("TempDir", []interface{}{dir, prefix})
	fake.tempDirMutex.Unlock()
	if fake.TempDirStub != nil {
		return fake.TempDirStub(dir, prefix)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.tempDirReturns.result1, fake.tempDirReturns.result2
}

func (fake *FakeIoService) TempDirCallCount() int {
	fake.tempDirMutex.RLock()
	defer fake.tempDirMutex.RUnlock()
	return len(fake.tempDirArgsForCall)
}

func (fake *FakeIoService) TempDirArgsForCall(i int) (string, string) {
	fake.tempDirMutex.RLock()
	defer fake.tempDirMutex.RUnlock()
	return fake.tempDirArgsForCall[i].dir, fake.tempDirArgsForCall[i].prefix
}

func (fake *FakeIoService) TempDirReturns(result1 string, result2 error) {
	fake.TempDirStub = nil
	fake.tempDirReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeIoService) TempDirReturnsOnCall(i int, result1 string, result2 error) {
	fake.TempDirStub = nil
	if fake.tempDirReturnsOnCall == nil {
		fake.tempDirReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.tempDirReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeIoService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.copyMutex.RLock()
	defer fake.copyMutex.RUnlock()
	fake.tempDirMutex.RLock()
	defer fake.tempDirMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIoService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ services.IoService = new(FakeIoService)
